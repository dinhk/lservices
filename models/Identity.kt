package com.qut.webservices.igalogicservices.models

import com.fasterxml.jackson.annotation.JsonInclude

/**
* IAM Logic Services
* Business Logic service supporting the IAM integration layer for Saviynt
*
* OpenAPI spec version: 1.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

/**
 * 
 * @param studentId 
 * @param employeeId 
 * @param igaUserId 
 * @param studentAccountId
 * @param staffAccountId
 * @param iamClientId
 * @param person
 * @param citizenship
 * @param courseEnrolments
 * @param occupancies
 * @param epeCourses
 * @param unitEnrolments
 */

@JsonInclude(JsonInclude.Include.NON_NULL)
data class IdentityDto (
    val studentId: String? = null,
    val employeeId: String? = null,
    val igaUserId: String? = null,
    val studentAccountId: Int? = null,
    val staffAccountId: Int? = null,
    val iamClientId: Int? = null,
    var person: Person? = null,
    var citizenship: Citizenship? = null,
    var location: Location? = null,
    var courseEnrolments: Array<CourseEnrolmentDto>? = null,
    val occupancies: Array<Occupancy>? = null,
    val epeCourses: Array<EpeCourse>? = null,
    val unitEnrolments: Array<UnitEnrolmentDto>? = null,
    val sanctions: Array<Sanction>? = null,
    var cards: Array<Card>? = null,
    var qutUsername: String? = null
//    var managerReverseLookup: Array<ReverseLookup>? = null
) {
    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as IdentityDto

        if (studentId != other.studentId) return false
        if (employeeId != other.employeeId) return false
        if (igaUserId != other.igaUserId) return false
        if (studentAccountId != other.studentAccountId) return false
        if (staffAccountId != other.staffAccountId) return false
        if (iamClientId != other.iamClientId) return false
        if (person != other.person) return false
        if (citizenship != other.citizenship) return false
        if (location != other.location) return false
        if (courseEnrolments != null) {
            if (other.courseEnrolments == null) return false
            if (!courseEnrolments.contentEquals(other.courseEnrolments)) return false
        } else if (other.courseEnrolments != null) return false
        if (occupancies != null) {
            if (other.occupancies == null) return false
            if (!occupancies.contentEquals(other.occupancies)) return false
        } else if (other.occupancies != null) return false
        if (epeCourses != null) {
            if (other.epeCourses == null) return false
            if (!epeCourses.contentEquals(other.epeCourses)) return false
        } else if (other.epeCourses != null) return false
        if (unitEnrolments != null) {
            if (other.unitEnrolments == null) return false
            if (!unitEnrolments.contentEquals(other.unitEnrolments)) return false
        } else if (other.unitEnrolments != null) return false
        if (sanctions != null) {
            if (other.sanctions == null) return false
            if (!sanctions.contentEquals(other.sanctions)) return false
        } else if (other.sanctions != null) return false
        if (cards != null) {
            if (other.cards == null) return false
            if (!cards.contentEquals(other.cards)) return false
        } else if (other.cards != null) return false
        if (qutUsername != other.qutUsername) return false
//        if (managerReverseLookup != null) {
//            if (other.managerReverseLookup == null) return false
//            if (!managerReverseLookup.contentEquals(other.managerReverseLookup)) return false
//        } else if (other.managerReverseLookup != null) return false

        return true
    }

    override fun hashCode(): Int {
        var result = studentId?.hashCode() ?: 0
        result = 31 * result + (employeeId?.hashCode() ?: 0)
        result = 31 * result + (igaUserId?.hashCode() ?: 0)
        result = 31 * result + (studentAccountId ?: 0)
        result = 31 * result + (staffAccountId ?: 0)
        result = 31 * result + (iamClientId ?: 0)
        result = 31 * result + (person?.hashCode() ?: 0)
        result = 31 * result + (citizenship?.hashCode() ?: 0)
        result = 31 * result + (location?.hashCode() ?: 0)
        result = 31 * result + (courseEnrolments?.contentHashCode() ?: 0)
        result = 31 * result + (occupancies?.contentHashCode() ?: 0)
        result = 31 * result + (epeCourses?.contentHashCode() ?: 0)
        result = 31 * result + (unitEnrolments?.contentHashCode() ?: 0)
        result = 31 * result + (sanctions?.contentHashCode() ?: 0)
        result = 31 * result + (cards?.contentHashCode() ?: 0)
        result = 31 * result + (qutUsername?.hashCode() ?: 0)
//        result = 31 * result + (managerReverseLookup?.contentHashCode() ?: 0)
        return result
    }

}

@JsonInclude(JsonInclude.Include.NON_NULL)
data class Identity (
    var studentId: String? = null,
    var employeeId: String? = null,
    var igaUserId: String? = null,
    var studentAccountId: Int? = null,
    var staffAccountId: Int? = null,
    var iamClientId: Int? = null,
    var person: Person? = null,
    var citizenship: Citizenship? = null,
    var location: Location? = null,
    var courseEnrolments: Array<CourseEnrolment>? = null,
    var occupancies: Array<Occupancy>? = null,
    var epeCourses: Array<EpeCourse>? = null,
    var unitEnrolments: Array<UnitEnrolment>? = null,
    var sanctions: Array<Sanction>? = null,
    var cards: Array<Card>? = null,
    var qutUsername: String? = null
//    var managerReverseLookup: Array<ReverseLookup>? = null
)  {
    constructor(identityDto: IdentityDto) : this() {
        val groupedUnitEnrolments = identityDto.unitEnrolments?.groupBy { UnitEnrolmentKey(it.studentId, it.courseCode, it.courseAttemptNo, it.courseVersionNo, it.unitCode, it.unitAttemptNo, it.unitVersionNo) }
        this.setUnitEnrolment(groupedUnitEnrolments)

        val groupedCourseEnrolments = identityDto.courseEnrolments?.groupBy { CourseEnrolmentKey(it.studentId, it.courseCode, it.courseAttemptNo, it.courseVersionNo) }
        this.setCourseEnrolment(groupedCourseEnrolments)

        this.studentId = identityDto.studentId
        this.employeeId = identityDto.employeeId
        this.igaUserId = identityDto.igaUserId
        this.studentAccountId = identityDto.studentAccountId
        this.staffAccountId = identityDto.staffAccountId
        this.iamClientId = identityDto.iamClientId
        this.person = identityDto.person
        this.citizenship = identityDto.citizenship
        this.location = identityDto.location
        this.occupancies = identityDto.occupancies
        this.epeCourses = identityDto.epeCourses
        this.sanctions = identityDto.sanctions
        this.cards = identityDto.cards
        this.qutUsername = identityDto.qutUsername
//        this.managerReverseLookup = identityDto.managerReverseLookup
    }

    private fun setUnitEnrolment(groupedUnitEnrolments: Map<UnitEnrolmentKey, List<UnitEnrolmentDto>>?) {
        if(groupedUnitEnrolments == null) {
            this.unitEnrolments = null
            return
        }

        val unitEnrolments = mutableListOf<UnitEnrolment>()
        for((_, unitEnrolmentDtos) in groupedUnitEnrolments) {
            val owningOrgsUnitUnits = mutableSetOf<OrgUnits>()
            for(unitEnrolmentDto in unitEnrolmentDtos) {
                if(unitEnrolmentDto.owningOrgUnitCode != null && unitEnrolmentDto.owningFacultyOrgUnitCode != null && unitEnrolmentDto.responsibilityPercentage != null) owningOrgsUnitUnits.add(OrgUnits(unitEnrolmentDto.owningOrgUnitCode, unitEnrolmentDto.owningFacultyOrgUnitCode, unitEnrolmentDto.responsibilityPercentage))
            }
            unitEnrolments.add(UnitEnrolment(
                unitEnrolmentDtos[0].studentId,
                unitEnrolmentDtos[0].courseCode,
                unitEnrolmentDtos[0].courseAttemptNo,
                unitEnrolmentDtos[0].courseVersionNo,
                unitEnrolmentDtos[0].unitCode,
                unitEnrolmentDtos[0].unitAttemptNo,
                unitEnrolmentDtos[0].unitVersionNo,
                unitEnrolmentDtos[0].unitStatusCode,
                owningOrgsUnitUnits.toTypedArray(),
                unitEnrolmentDtos[0].courseStatusCode,
                unitEnrolmentDtos[0].courseCommencementDate,
                unitEnrolmentDtos[0].deleted
            ))
        }
        this.unitEnrolments = unitEnrolments.toTypedArray()
    }

    private fun setCourseEnrolment(groupedCourseEnrolments: Map<CourseEnrolmentKey, List<CourseEnrolmentDto>>?) {
        if(groupedCourseEnrolments == null) {
            this.courseEnrolments = null
            return
        }

        val courseEnrolments = mutableListOf<CourseEnrolment>()
        for((_, courseEnrolmentDtos) in groupedCourseEnrolments) {
            val owningOrgUnits = mutableSetOf<OrgUnits>()
            val supervisorOrgUnits = mutableSetOf<OrgUnits>()
            val availabilityOrgUnits = mutableSetOf<OrgUnits>()

            for(courseEnrolmentDto in courseEnrolmentDtos) {
                if(courseEnrolmentDto.owningOrgUnitCode != null && courseEnrolmentDto.owningFacultyOrgUnitCode != null && courseEnrolmentDto.responsibilityPercentage != null) owningOrgUnits.add(OrgUnits(courseEnrolmentDto.owningOrgUnitCode, courseEnrolmentDto.owningFacultyOrgUnitCode, courseEnrolmentDto.responsibilityPercentage))
                if(courseEnrolmentDto.supervisionOrgUnitCode != null && courseEnrolmentDto.supervisionFacultyOrgUnitCode != null && courseEnrolmentDto.supervisionPercentage != null) supervisorOrgUnits.add(OrgUnits(courseEnrolmentDto.supervisionOrgUnitCode, courseEnrolmentDto.supervisionFacultyOrgUnitCode, courseEnrolmentDto.supervisionPercentage))
                if(courseEnrolmentDto.availabilityOrgUnitCode != null && courseEnrolmentDto.availabilityFacultyOrgUnitCode != null && courseEnrolmentDto.availabilityPercentage != null) availabilityOrgUnits.add(OrgUnits(courseEnrolmentDto.availabilityOrgUnitCode, courseEnrolmentDto.availabilityFacultyOrgUnitCode, courseEnrolmentDto.availabilityPercentage))
            }

            courseEnrolments.add(CourseEnrolment(
                courseEnrolmentDtos[0].studentId,
                courseEnrolmentDtos[0].courseCode,
                courseEnrolmentDtos[0].courseAttemptNo,
                courseEnrolmentDtos[0].courseVersionNo,
                courseEnrolmentDtos[0].commencementDate,
                courseEnrolmentDtos[0].completionDate,
                courseEnrolmentDtos[0].calcAttendanceModeCode,
                courseEnrolmentDtos[0].attendanceMode,
                courseEnrolmentDtos[0].discontinuedDate,
                courseEnrolmentDtos[0].studyModeCode,
                courseEnrolmentDtos[0].locationCode,
                courseEnrolmentDtos[0].courseStatusCode,
                courseEnrolmentDtos[0].studyTypeCode,
                courseEnrolmentDtos[0].calcLoadCatCode,
                courseEnrolmentDtos[0].loadCategoryCode,
                courseEnrolmentDtos[0].conferralDate,
                courseEnrolmentDtos[0].spkCategoryTypeCode,
                owningOrgUnits.toTypedArray(),
                supervisorOrgUnits.toTypedArray(),
                availabilityOrgUnits.toTypedArray(),
                courseEnrolmentDtos[0].deleted
            ))
        }
        this.courseEnrolments = courseEnrolments.toTypedArray()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Identity

        if (studentId != other.studentId) return false
        if (employeeId != other.employeeId) return false
        if (igaUserId != other.igaUserId) return false
        if (studentAccountId != other.studentAccountId) return false
        if (staffAccountId != other.staffAccountId) return false
        if (iamClientId != other.iamClientId) return false
        if (person != other.person) return false
        if (citizenship != other.citizenship) return false
        if (location != other.location) return false
        if (courseEnrolments != null) {
            if (other.courseEnrolments == null) return false
            if (!courseEnrolments.contentEquals(other.courseEnrolments)) return false
        } else if (other.courseEnrolments != null) return false
        if (occupancies != null) {
            if (other.occupancies == null) return false
            if (!occupancies.contentEquals(other.occupancies)) return false
        } else if (other.occupancies != null) return false
        if (epeCourses != null) {
            if (other.epeCourses == null) return false
            if (!epeCourses.contentEquals(other.epeCourses)) return false
        } else if (other.epeCourses != null) return false
        if (unitEnrolments != null) {
            if (other.unitEnrolments == null) return false
            if (!unitEnrolments.contentEquals(other.unitEnrolments)) return false
        } else if (other.unitEnrolments != null) return false
        if (sanctions != null) {
            if (other.sanctions == null) return false
            if (!sanctions.contentEquals(other.sanctions)) return false
        } else if (other.sanctions != null) return false
        if (cards != null) {
            if (other.cards == null) return false
            if (!cards.contentEquals(other.cards)) return false
        } else if (other.cards != null) return false
        if (qutUsername != other.qutUsername) return false
//        if (managerReverseLookup != null) {
//            if (other.managerReverseLookup == null) return false
//            if (!managerReverseLookup.contentEquals(other.managerReverseLookup)) return false
//        } else if (other.managerReverseLookup != null) return false

        return true
    }

    override fun hashCode(): Int {
        var result = studentId?.hashCode() ?: 0
        result = 31 * result + (employeeId?.hashCode() ?: 0)
        result = 31 * result + (igaUserId?.hashCode() ?: 0)
        result = 31 * result + (studentAccountId ?: 0)
        result = 31 * result + (staffAccountId ?: 0)
        result = 31 * result + (iamClientId ?: 0)
        result = 31 * result + (person?.hashCode() ?: 0)
        result = 31 * result + (citizenship?.hashCode() ?: 0)
        result = 31 * result + (location?.hashCode() ?: 0)
        result = 31 * result + (courseEnrolments?.contentHashCode() ?: 0)
        result = 31 * result + (occupancies?.contentHashCode() ?: 0)
        result = 31 * result + (epeCourses?.contentHashCode() ?: 0)
        result = 31 * result + (unitEnrolments?.contentHashCode() ?: 0)
        result = 31 * result + (sanctions?.contentHashCode() ?: 0)
        result = 31 * result + (cards?.contentHashCode() ?: 0)
        result = 31 * result + (qutUsername?.hashCode() ?: 0)
//        result = 31 * result + (managerReverseLookup?.contentHashCode() ?: 0)
        return result
    }


}

